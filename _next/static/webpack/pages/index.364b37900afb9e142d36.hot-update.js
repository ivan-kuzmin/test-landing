webpackHotUpdate_N_E("pages/index",{

/***/ "./node_modules/next/dist/compiled/css-loader/cjs.js?!./node_modules/next/dist/compiled/postcss-loader/cjs.js?!./node_modules/next/dist/compiled/resolve-url-loader/index.js?!./node_modules/next/dist/compiled/sass-loader/cjs.js?!./node_modules/sass-resources-loader/lib/loader.js?!./src/components2/Home/ui/PersonStory/PersonStory.module.scss":
/*!******************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** (webpack)/css-loader/cjs.js??ref--5-oneOf-3-1!(webpack)/postcss-loader/cjs.js??ref--5-oneOf-3-2!(webpack)/resolve-url-loader??ref--5-oneOf-3-3!(webpack)/sass-loader/cjs.js??ref--5-oneOf-3-4!./node_modules/sass-resources-loader/lib/loader.js??ref--7!./src/components2/Home/ui/PersonStory/PersonStory.module.scss ***!
  \******************************************************************************************************************************************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// Imports\nvar ___CSS_LOADER_API_IMPORT___ = __webpack_require__(/*! ../../../../../node_modules/next/dist/compiled/css-loader/api.js */ \"./node_modules/next/dist/compiled/css-loader/api.js\");\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(true);\n// Module\n___CSS_LOADER_EXPORT___.push([module.i, \".PersonStory_PersonStory__3wVIk {\\n  text-align: center;\\n  margin: auto;\\n  width: 100%; }\\n  @media (max-width: 486px) {\\n    .PersonStory_PersonStory__3wVIk {\\n      margin: 0; } }\\n  .PersonStory_PersonStory__container__Yhs-j {\\n    display: flex;\\n    width: 100%;\\n    height: 100%;\\n    max-width: 980px;\\n    margin: 0 auto; }\\n  .PersonStory_PersonStory__content__YR97s {\\n    width: 100%;\\n    position: relative;\\n    margin: auto;\\n    display: flex; }\\n  .PersonStory_PersonStory__information__1YrVa {\\n    position: relative;\\n    width: 100%;\\n    height: 100%;\\n    z-index: 20; }\\n    @media (max-width: 768px) {\\n      .PersonStory_PersonStory__information__1YrVa {\\n        padding: 100px 0 50px; } }\\n    @media (max-width: 486px) {\\n      .PersonStory_PersonStory__information__1YrVa {\\n        padding-top: 70px; } }\\n  .PersonStory_PersonStory__character-block__153qZ {\\n    margin: auto;\\n    width: 280px;\\n    height: 280px;\\n    -webkit-transition: -webkit-transform 0.1s;\\n    transition: -webkit-transform 0.1s;\\n    transition: transform 0.1s;\\n    transition: transform 0.1s, -webkit-transform 0.1s;\\n    -webkit-transform-origin: center top;\\n            transform-origin: center top;\\n    -webkit-transform: scale(var(--scale));\\n            transform: scale(var(--scale)); }\\n    @media (max-width: 486px) {\\n      .PersonStory_PersonStory__character-block__153qZ {\\n        width: 216px;\\n        height: 216px;\\n        margin-bottom: 64px;\\n        -webkit-transform: scale(var(--scale-mobile));\\n                transform: scale(var(--scale-mobile)); } }\\n  .PersonStory_PersonStory__character__14uAO {\\n    width: 100%;\\n    height: 100%;\\n    border-radius: 50%;\\n    overflow: hidden; }\\n  .PersonStory_PersonStory__character-image__3aD1D {\\n    width: 100%;\\n    height: 100%;\\n    border-radius: 50%;\\n    overflow: hidden; }\\n  .PersonStory_PersonStory__text-content__3Gr2e {\\n    height: 100%;\\n    margin: 32px 0 0; }\\n  .PersonStory_PersonStory__first-block__3BiOL {\\n    max-width: 600px;\\n    margin: auto;\\n    position: absolute;\\n    left: 0;\\n    right: 0; }\\n    .PersonStory_PersonStory__first-block_relative__2gdNW {\\n      position: relative; }\\n  .PersonStory_PersonStory__title__22MEw {\\n    margin: 0 auto 16px; }\\n  .PersonStory_PersonStory__subtitle__2tvJi {\\n    margin: auto; }\\n  .PersonStory_PersonStory__second-block__ZhmzF {\\n    max-width: 550px;\\n    margin: auto;\\n    z-index: 5;\\n    opacity: 0;\\n    -webkit-transform: translateY(var(--translateY));\\n            transform: translateY(var(--translateY)); }\\n  .PersonStory_PersonStory__second-subtitle__ShtR8 {\\n    max-width: 392px;\\n    margin: auto; }\\n  .PersonStory_PersonStory__3wVIk canvas {\\n    width: 100% !important;\\n    height: 100% !important;\\n    border-radius: 50%; }\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://PersonStory.module.scss\",\"webpack://../../../../styles/_include-media.scss\"],\"names\":[],\"mappings\":\"AA8BA;EACE,kBAAkB;EAClB,YAAY;EACZ,WAAW,EAAA;EC4gBT;ID/gBJ;MAMI,SAAS,EAAA,EA0GZ;EAvGC;IACE,aAAa;IACb,WAAW;IACX,YAAY;IACZ,gBAAgB;IAChB,cAAc,EAAA;EAGhB;IACE,WAAW;IACX,kBAAkB;IAClB,YAAY;IACZ,aAAa,EAAA;EAGf;IACE,kBAAkB;IAClB,WAAW;IACX,YAAY;IACZ,WAAW,EAAA;ICmfX;MDvfF;QAOI,qBAAqB,EAAA,EAMxB;IC0eC;MDvfF;QAWI,iBAAiB,EAAA,EAEpB;EAED;IACE,YAAY;IACZ,YAAY;IACZ,aAAa;IACb,0CAA0B;IAA1B,kCAA0B;IAA1B,0BAA0B;IAA1B,kDAA0B;IAC1B,oCAA4B;YAA5B,4BAA4B;IAC5B,sCAA8B;YAA9B,8BAA8B,EAAA;ICke9B;MDxeF;QASI,YAAY;QACZ,aAAa;QACb,mBAAmB;QACnB,6CAAqC;gBAArC,qCAAqC,EAAA,EAExC;EAED;IACE,WAAW;IACX,YAAY;IACZ,kBAAkB;IAClB,gBAAgB,EAAA;EAGlB;IACE,WAAW;IACX,YAAY;IACZ,kBAAkB;IAClB,gBAAgB,EAAA;EAGlB;IACE,YAAY;IACZ,gBAAgB,EAAA;EAGlB;IACE,gBAAgB;IAChB,YAAY;IACZ,kBAAkB;IAClB,OAAO;IACP,QAAQ,EAAA;IAER;MACE,kBAAkB,EAAA;EAItB;IACE,mBAAmB,EAAA;EAGrB;IACE,YAAY,EAAA;EAGd;IACE,gBAAgB;IAChB,YAAY;IACZ,UAAU;IACV,UAAU;IACV,gDAAwC;YAAxC,wCAAwC,EAAA;EAG1C;IACE,gBAAgB;IAChB,YAAY,EAAA;EAxGhB;IA4GI,sBAAsB;IACtB,uBAAuB;IACvB,kBAAkB,EAAA\",\"sourcesContent\":[\"@import '../../../../styles/_include-media.scss';\\n\\n$mobile-xxs: 320px;\\n$mobile-xs: 414px;\\n$mobile: 486px;\\n$tablet: 768px;\\n$desktop-sm: 992px;\\n$desktop: 1024px;\\n$desktop-lg: 1280px;\\n\\n$breakpoints: (\\n  mobile-xxs: $mobile-xxs,\\n  mobile-xs: $mobile-xs,\\n  mobile: $mobile,\\n  tablet: $tablet,\\n  desktop-sm: $desktop-sm,\\n  desktop: $desktop,\\n  desktop-lg: $desktop-lg,\\n);\\n\\n:export {\\n  mobile-xxs: $mobile-xxs;\\n  mobile-xs: $mobile-xs;\\n  mobile: $mobile;\\n  tablet: $tablet;\\n  desktop-sm: $desktop-sm;\\n  desktop: $desktop;\\n  desktop-lg: $desktop-lg;\\n}\\n\\n.PersonStory {\\n  text-align: center;\\n  margin: auto;\\n  width: 100%;\\n\\n  @include media('<=mobile') {\\n    margin: 0;\\n  }\\n\\n  &__container {\\n    display: flex;\\n    width: 100%;\\n    height: 100%;\\n    max-width: 980px;\\n    margin: 0 auto;\\n  }\\n\\n  &__content {\\n    width: 100%;\\n    position: relative;\\n    margin: auto;\\n    display: flex;\\n  }\\n\\n  &__information {\\n    position: relative;\\n    width: 100%;\\n    height: 100%;\\n    z-index: 20;\\n\\n    @include media('<=tablet') {\\n      padding: 100px 0 50px;\\n    }\\n\\n    @include media('<=mobile') {\\n      padding-top: 70px;\\n    }\\n  }\\n\\n  &__character-block {\\n    margin: auto;\\n    width: 280px;\\n    height: 280px;\\n    transition: transform 0.1s;\\n    transform-origin: center top;\\n    transform: scale(var(--scale));\\n    \\n    @include media('<=mobile') {\\n      width: 216px;\\n      height: 216px;\\n      margin-bottom: 64px;\\n      transform: scale(var(--scale-mobile));\\n    }\\n  }\\n\\n  &__character {\\n    width: 100%;\\n    height: 100%;\\n    border-radius: 50%;\\n    overflow: hidden;\\n  }\\n\\n  &__character-image {\\n    width: 100%;\\n    height: 100%;\\n    border-radius: 50%;\\n    overflow: hidden;\\n  }\\n\\n  &__text-content {\\n    height: 100%;\\n    margin: 32px 0 0;\\n  }\\n\\n  &__first-block {\\n    max-width: 600px;\\n    margin: auto;\\n    position: absolute;\\n    left: 0;\\n    right: 0;\\n\\n    &_relative {\\n      position: relative;\\n    }\\n  }\\n\\n  &__title {\\n    margin: 0 auto 16px;\\n  }\\n\\n  &__subtitle {\\n    margin: auto;\\n  }\\n\\n  &__second-block {\\n    max-width: 550px;\\n    margin: auto;\\n    z-index: 5;\\n    opacity: 0;\\n    transform: translateY(var(--translateY));\\n  }\\n\\n  &__second-subtitle {\\n    max-width: 392px;\\n    margin: auto;\\n  }\\n\\n  canvas {\\n    width: 100% !important;\\n    height: 100% !important;\\n    border-radius: 50%;\\n  }\\n}\\n\",\"@charset \\\"UTF-8\\\";\\n\\n//     _            _           _                           _ _\\n//    (_)          | |         | |                         | (_)\\n//     _ _ __   ___| |_   _  __| | ___   _ __ ___   ___  __| |_  __ _\\n//    | | '_ \\\\ / __| | | | |/ _` |/ _ \\\\ | '_ ` _ \\\\ / _ \\\\/ _` | |/ _` |\\n//    | | | | | (__| | |_| | (_| |  __/ | | | | | |  __/ (_| | | (_| |\\n//    |_|_| |_|\\\\___|_|\\\\__,_|\\\\__,_|\\\\___| |_| |_| |_|\\\\___|\\\\__,_|_|\\\\__,_|\\n//\\n//      Simple, elegant and maintainable media queries in Sass\\n//                        v1.4.9\\n//\\n//        https://eduardoboucas.github.io/include-media\\n//\\n//         Authors: Eduardo Boucas (@eduardoboucas)\\n//                  Hugo Giraudel (@hugogiraudel)\\n//\\n//      This project is licensed under the terms of the MIT license\\n////\\n/// include-media library public configuration\\n/// @author Eduardo Boucas\\n/// @access public\\n////\\n\\n\\n///\\n/// Creates a list of global breakpoints\\n///\\n/// @example scss - Creates a single breakpoint with the label `phone`\\n///  $breakpoints: ('phone': 320px);\\n///\\n$breakpoints: (\\n  'phone': 320px,\\n  'tablet': 768px,\\n  'desktop': 1024px\\n) !default;\\n\\n\\n///\\n/// Creates a list of static expressions or media types\\n///\\n/// @example scss - Creates a single media type (screen)\\n///  $media-expressions: ('screen': 'screen');\\n///\\n/// @example scss - Creates a static expression with logical disjunction (OR operator)\\n///  $media-expressions: (\\n///    'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)'\\n///  );\\n///\\n$media-expressions: (\\n  'screen': 'screen',\\n  'print': 'print',\\n  'handheld': 'handheld',\\n  'landscape': '(orientation: landscape)',\\n  'portrait': '(orientation: portrait)',\\n  'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi), (min-resolution: 2dppx)',\\n  'retina3x': '(-webkit-min-device-pixel-ratio: 3), (min-resolution: 350dpi), (min-resolution: 3dppx)'\\n) !default;\\n\\n\\n///\\n/// Defines a number to be added or subtracted from each unit when declaring breakpoints with exclusive intervals\\n///\\n/// @example scss - Interval for pixels is defined as `1` by default\\n///  @include media('>128px') {}\\n///\\n///  /* Generates: */\\n///  @media (min-width: 129px) {}\\n///\\n/// @example scss - Interval for ems is defined as `0.01` by default\\n///  @include media('>20em') {}\\n///\\n///  /* Generates: */\\n///  @media (min-width: 20.01em) {}\\n///\\n/// @example scss - Interval for rems is defined as `0.1` by default, to be used with `font-size: 62.5%;`\\n///  @include media('>2.0rem') {}\\n///\\n///  /* Generates: */\\n///  @media (min-width: 2.1rem) {}\\n///\\n$unit-intervals: (\\n  'px': 1,\\n  'em': 0.01,\\n  'rem': 0.1,\\n  '': 0\\n) !default;\\n\\n///\\n/// Defines whether support for media queries is available, useful for creating separate stylesheets\\n/// for browsers that don't support media queries.\\n///\\n/// @example scss - Disables support for media queries\\n///  $im-media-support: false;\\n///  @include media('>=tablet') {\\n///    .foo {\\n///      color: tomato;\\n///    }\\n///  }\\n///\\n///  /* Generates: */\\n///  .foo {\\n///    color: tomato;\\n///  }\\n///\\n$im-media-support: true !default;\\n\\n///\\n/// Selects which breakpoint to emulate when support for media queries is disabled. Media queries that start at or\\n/// intercept the breakpoint will be displayed, any others will be ignored.\\n///\\n/// @example scss - This media query will show because it intercepts the static breakpoint\\n///  $im-media-support: false;\\n///  $im-no-media-breakpoint: 'desktop';\\n///  @include media('>=tablet') {\\n///    .foo {\\n///      color: tomato;\\n///    }\\n///  }\\n///\\n///  /* Generates: */\\n///  .foo {\\n///    color: tomato;\\n///  }\\n///\\n/// @example scss - This media query will NOT show because it does not intercept the desktop breakpoint\\n///  $im-media-support: false;\\n///  $im-no-media-breakpoint: 'tablet';\\n///  @include media('>=desktop') {\\n///    .foo {\\n///      color: tomato;\\n///    }\\n///  }\\n///\\n///  /* No output */\\n///\\n$im-no-media-breakpoint: 'desktop' !default;\\n\\n///\\n/// Selects which media expressions are allowed in an expression for it to be used when media queries\\n/// are not supported.\\n///\\n/// @example scss - This media query will show because it intercepts the static breakpoint and contains only accepted media expressions\\n///  $im-media-support: false;\\n///  $im-no-media-breakpoint: 'desktop';\\n///  $im-no-media-expressions: ('screen');\\n///  @include media('>=tablet', 'screen') {\\n///    .foo {\\n///      color: tomato;\\n///    }\\n///  }\\n///\\n///   /* Generates: */\\n///   .foo {\\n///     color: tomato;\\n///   }\\n///\\n/// @example scss - This media query will NOT show because it intercepts the static breakpoint but contains a media expression that is not accepted\\n///  $im-media-support: false;\\n///  $im-no-media-breakpoint: 'desktop';\\n///  $im-no-media-expressions: ('screen');\\n///  @include media('>=tablet', 'retina2x') {\\n///    .foo {\\n///      color: tomato;\\n///    }\\n///  }\\n///\\n///  /* No output */\\n///\\n$im-no-media-expressions: ('screen', 'portrait', 'landscape') !default;\\n\\n////\\n/// Cross-engine logging engine\\n/// @author Hugo Giraudel\\n/// @access private\\n////\\n\\n\\n///\\n/// Log a message either with `@error` if supported\\n/// else with `@warn`, using `feature-exists('at-error')`\\n/// to detect support.\\n///\\n/// @param {String} $message - Message to log\\n///\\n@function im-log($message) {\\n  @if feature-exists('at-error') {\\n    @error $message;\\n  } @else {\\n    @warn $message;\\n    $_: noop();\\n  }\\n\\n  @return $message;\\n}\\n\\n\\n///\\n/// Wrapper mixin for the log function so it can be used with a more friendly\\n/// API than `@if im-log('..') {}` or `$_: im-log('..')`. Basically, use the function\\n/// within functions because it is not possible to include a mixin in a function\\n/// and use the mixin everywhere else because it's much more elegant.\\n///\\n/// @param {String} $message - Message to log\\n///\\n@mixin log($message) {\\n  @if im-log($message) {}\\n}\\n\\n\\n///\\n/// Function with no `@return` called next to `@warn` in Sass 3.3\\n/// to trigger a compiling error and stop the process.\\n///\\n@function noop() {}\\n\\n///\\n/// Determines whether a list of conditions is intercepted by the static breakpoint.\\n///\\n/// @param {Arglist}   $conditions  - Media query conditions\\n///\\n/// @return {Boolean} - Returns true if the conditions are intercepted by the static breakpoint\\n///\\n@function im-intercepts-static-breakpoint($conditions...) {\\n  $no-media-breakpoint-value: map-get($breakpoints, $im-no-media-breakpoint);\\n\\n  @if not $no-media-breakpoint-value {\\n    @if im-log('`#{$im-no-media-breakpoint}` is not a valid breakpoint.') {}\\n  }\\n\\n  @each $condition in $conditions {\\n    @if not map-has-key($media-expressions, $condition) {\\n      $operator: get-expression-operator($condition);\\n      $prefix: get-expression-prefix($operator);\\n      $value: get-expression-value($condition, $operator);\\n\\n      @if ($prefix == 'max' and $value <= $no-media-breakpoint-value) or\\n          ($prefix == 'min' and $value > $no-media-breakpoint-value) {\\n        @return false;\\n      }\\n    } @else if not index($im-no-media-expressions, $condition) {\\n      @return false;\\n    }\\n  }\\n\\n  @return true;\\n}\\n\\n////\\n/// Parsing engine\\n/// @author Hugo Giraudel\\n/// @access private\\n////\\n\\n\\n///\\n/// Get operator of an expression\\n///\\n/// @param {String} $expression - Expression to extract operator from\\n///\\n/// @return {String} - Any of `>=`, `>`, `<=`, `<`, `≥`, `≤`\\n///\\n@function get-expression-operator($expression) {\\n  @each $operator in ('>=', '>', '<=', '<', '≥', '≤') {\\n    @if str-index($expression, $operator) {\\n      @return $operator;\\n    }\\n  }\\n\\n  // It is not possible to include a mixin inside a function, so we have to\\n  // rely on the `im-log(..)` function rather than the `log(..)` mixin. Because\\n  // functions cannot be called anywhere in Sass, we need to hack the call in\\n  // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\\n  // Sass 3.3, change this line in `@if im-log(..) {}` instead.\\n  $_: im-log('No operator found in `#{$expression}`.');\\n}\\n\\n\\n///\\n/// Get dimension of an expression, based on a found operator\\n///\\n/// @param {String} $expression - Expression to extract dimension from\\n/// @param {String} $operator - Operator from `$expression`\\n///\\n/// @return {String} - `width` or `height` (or potentially anything else)\\n///\\n@function get-expression-dimension($expression, $operator) {\\n  $operator-index: str-index($expression, $operator);\\n  $parsed-dimension: str-slice($expression, 0, $operator-index - 1);\\n  $dimension: 'width';\\n\\n  @if str-length($parsed-dimension) > 0 {\\n    $dimension: $parsed-dimension;\\n  }\\n\\n  @return $dimension;\\n}\\n\\n\\n///\\n/// Get dimension prefix based on an operator\\n///\\n/// @param {String} $operator - Operator\\n///\\n/// @return {String} - `min` or `max`\\n///\\n@function get-expression-prefix($operator) {\\n  @return if(index(('<', '<=', '≤'), $operator), 'max', 'min');\\n}\\n\\n\\n///\\n/// Get value of an expression, based on a found operator\\n///\\n/// @param {String} $expression - Expression to extract value from\\n/// @param {String} $operator - Operator from `$expression`\\n///\\n/// @return {Number} - A numeric value\\n///\\n@function get-expression-value($expression, $operator) {\\n  $operator-index: str-index($expression, $operator);\\n  $value: str-slice($expression, $operator-index + str-length($operator));\\n\\n  @if map-has-key($breakpoints, $value) {\\n    $value: map-get($breakpoints, $value);\\n  } @else {\\n    $value: to-number($value);\\n  }\\n\\n  $interval: map-get($unit-intervals, unit($value));\\n\\n  @if not $interval {\\n    // It is not possible to include a mixin inside a function, so we have to\\n    // rely on the `im-log(..)` function rather than the `log(..)` mixin. Because\\n    // functions cannot be called anywhere in Sass, we need to hack the call in\\n    // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\\n    // Sass 3.3, change this line in `@if im-log(..) {}` instead.\\n    $_: im-log('Unknown unit `#{unit($value)}`.');\\n  }\\n\\n  @if $operator == '>' {\\n    $value: $value + $interval;\\n  } @else if $operator == '<' {\\n    $value: $value - $interval;\\n  }\\n\\n  @return $value;\\n}\\n\\n\\n///\\n/// Parse an expression to return a valid media-query expression\\n///\\n/// @param {String} $expression - Expression to parse\\n///\\n/// @return {String} - Valid media query\\n///\\n@function parse-expression($expression) {\\n  // If it is part of $media-expressions, it has no operator\\n  // then there is no need to go any further, just return the value\\n  @if map-has-key($media-expressions, $expression) {\\n    @return map-get($media-expressions, $expression);\\n  }\\n\\n  $operator: get-expression-operator($expression);\\n  $dimension: get-expression-dimension($expression, $operator);\\n  $prefix: get-expression-prefix($operator);\\n  $value: get-expression-value($expression, $operator);\\n\\n  @return '(#{$prefix}-#{$dimension}: #{$value})';\\n}\\n\\n///\\n/// Slice `$list` between `$start` and `$end` indexes\\n///\\n/// @access private\\n///\\n/// @param {List} $list - List to slice\\n/// @param {Number} $start [1] - Start index\\n/// @param {Number} $end [length($list)] - End index\\n///\\n/// @return {List} Sliced list\\n///\\n@function slice($list, $start: 1, $end: length($list)) {\\n  @if length($list) < 1 or $start > $end {\\n    @return ();\\n  }\\n\\n  $result: ();\\n\\n  @for $i from $start through $end {\\n    $result: append($result, nth($list, $i));\\n  }\\n\\n  @return $result;\\n}\\n\\n////\\n/// String to number converter\\n/// @author Hugo Giraudel\\n/// @access private\\n////\\n\\n\\n///\\n/// Casts a string into a number\\n///\\n/// @param {String | Number} $value - Value to be parsed\\n///\\n/// @return {Number}\\n///\\n@function to-number($value) {\\n  @if type-of($value) == 'number' {\\n    @return $value;\\n  } @else if type-of($value) != 'string' {\\n    $_: im-log('Value for `to-number` should be a number or a string.');\\n  }\\n\\n  $first-character: str-slice($value, 1, 1);\\n  $result: 0;\\n  $digits: 0;\\n  $minus: ($first-character == '-');\\n  $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);\\n\\n  // Remove +/- sign if present at first character\\n  @if ($first-character == '+' or $first-character == '-') {\\n    $value: str-slice($value, 2);\\n  }\\n\\n  @for $i from 1 through str-length($value) {\\n    $character: str-slice($value, $i, $i);\\n\\n    @if not (index(map-keys($numbers), $character) or $character == '.') {\\n      @return to-length(if($minus, -$result, $result), str-slice($value, $i))\\n    }\\n\\n    @if $character == '.' {\\n      $digits: 1;\\n    } @else if $digits == 0 {\\n      $result: $result * 10 + map-get($numbers, $character);\\n    } @else {\\n      $digits: $digits * 10;\\n      $result: $result + map-get($numbers, $character) / $digits;\\n    }\\n  }\\n\\n  @return if($minus, -$result, $result);\\n}\\n\\n\\n///\\n/// Add `$unit` to `$value`\\n///\\n/// @param {Number} $value - Value to add unit to\\n/// @param {String} $unit - String representation of the unit\\n///\\n/// @return {Number} - `$value` expressed in `$unit`\\n///\\n@function to-length($value, $unit) {\\n  $units: ('px': 1px, 'cm': 1cm, 'mm': 1mm, '%': 1%, 'ch': 1ch, 'pc': 1pc, 'in': 1in, 'em': 1em, 'rem': 1rem, 'pt': 1pt, 'ex': 1ex, 'vw': 1vw, 'vh': 1vh, 'vmin': 1vmin, 'vmax': 1vmax);\\n\\n  @if not index(map-keys($units), $unit) {\\n    $_: im-log('Invalid unit `#{$unit}`.');\\n  }\\n\\n  @return $value * map-get($units, $unit);\\n}\\n\\n///\\n/// This mixin aims at redefining the configuration just for the scope of\\n/// the call. It is helpful when having a component needing an extended\\n/// configuration such as custom breakpoints (referred to as tweakpoints)\\n/// for instance.\\n///\\n/// @author Hugo Giraudel\\n///\\n/// @param {Map} $tweakpoints [()] - Map of tweakpoints to be merged with `$breakpoints`\\n/// @param {Map} $tweak-media-expressions [()] - Map of tweaked media expressions to be merged with `$media-expression`\\n///\\n/// @example scss - Extend the global breakpoints with a tweakpoint\\n///  @include media-context(('custom': 678px)) {\\n///    .foo {\\n///      @include media('>phone', '<=custom') {\\n///       // ...\\n///      }\\n///    }\\n///  }\\n///\\n/// @example scss - Extend the global media expressions with a custom one\\n///  @include media-context($tweak-media-expressions: ('all': 'all')) {\\n///    .foo {\\n///      @include media('all', '>phone') {\\n///       // ...\\n///      }\\n///    }\\n///  }\\n///\\n/// @example scss - Extend both configuration maps\\n///  @include media-context(('custom': 678px), ('all': 'all')) {\\n///    .foo {\\n///      @include media('all', '>phone', '<=custom') {\\n///       // ...\\n///      }\\n///    }\\n///  }\\n///\\n@mixin media-context($tweakpoints: (), $tweak-media-expressions: ()) {\\n  // Save global configuration\\n  $global-breakpoints: $breakpoints;\\n  $global-media-expressions: $media-expressions;\\n\\n  // Update global configuration\\n  $breakpoints: map-merge($breakpoints, $tweakpoints) !global;\\n  $media-expressions: map-merge($media-expressions, $tweak-media-expressions) !global;\\n\\n  @content;\\n\\n  // Restore global configuration\\n  $breakpoints: $global-breakpoints !global;\\n  $media-expressions: $global-media-expressions !global;\\n}\\n\\n////\\n/// include-media public exposed API\\n/// @author Eduardo Boucas\\n/// @access public\\n////\\n\\n\\n///\\n/// Generates a media query based on a list of conditions\\n///\\n/// @param {Arglist}   $conditions  - Media query conditions\\n///\\n/// @example scss - With a single set breakpoint\\n///  @include media('>phone') { }\\n///\\n/// @example scss - With two set breakpoints\\n///  @include media('>phone', '<=tablet') { }\\n///\\n/// @example scss - With custom values\\n///  @include media('>=358px', '<850px') { }\\n///\\n/// @example scss - With set breakpoints with custom values\\n///  @include media('>desktop', '<=1350px') { }\\n///\\n/// @example scss - With a static expression\\n///  @include media('retina2x') { }\\n///\\n/// @example scss - Mixing everything\\n///  @include media('>=350px', '<tablet', 'retina3x') { }\\n///\\n@mixin media($conditions...) {\\n  @if ($im-media-support and length($conditions) == 0) or\\n      (not $im-media-support and im-intercepts-static-breakpoint($conditions...)) {\\n    @content;\\n  } @else if ($im-media-support and length($conditions) > 0) {\\n    @media #{unquote(parse-expression(nth($conditions, 1)))} {\\n      // Recursive call\\n      @include media(slice($conditions, 2)...) {\\n        @content;\\n      }\\n    }\\n  }\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {\n\t\"mobile-xxs\": \"320px\",\n\t\"mobile-xs\": \"414px\",\n\t\"mobile\": \"486px\",\n\t\"tablet\": \"768px\",\n\t\"desktop-sm\": \"992px\",\n\t\"desktop\": \"1024px\",\n\t\"desktop-lg\": \"1280px\",\n\t\"PersonStory\": \"PersonStory_PersonStory__3wVIk\",\n\t\"PersonStory__container\": \"PersonStory_PersonStory__container__Yhs-j\",\n\t\"PersonStory__content\": \"PersonStory_PersonStory__content__YR97s\",\n\t\"PersonStory__information\": \"PersonStory_PersonStory__information__1YrVa\",\n\t\"PersonStory__character-block\": \"PersonStory_PersonStory__character-block__153qZ\",\n\t\"PersonStory__character\": \"PersonStory_PersonStory__character__14uAO\",\n\t\"PersonStory__character-image\": \"PersonStory_PersonStory__character-image__3aD1D\",\n\t\"PersonStory__text-content\": \"PersonStory_PersonStory__text-content__3Gr2e\",\n\t\"PersonStory__first-block\": \"PersonStory_PersonStory__first-block__3BiOL\",\n\t\"PersonStory__first-block_relative\": \"PersonStory_PersonStory__first-block_relative__2gdNW\",\n\t\"PersonStory__title\": \"PersonStory_PersonStory__title__22MEw\",\n\t\"PersonStory__subtitle\": \"PersonStory_PersonStory__subtitle__2tvJi\",\n\t\"PersonStory__second-block\": \"PersonStory_PersonStory__second-block__ZhmzF\",\n\t\"PersonStory__second-subtitle\": \"PersonStory_PersonStory__second-subtitle__ShtR8\"\n};\nmodule.exports = ___CSS_LOADER_EXPORT___;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/next/dist/compiled/css-loader/cjs.js?!./node_modules/next/dist/compiled/postcss-loader/cjs.js?!./node_modules/next/dist/compiled/resolve-url-loader/index.js?!./node_modules/next/dist/compiled/sass-loader/cjs.js?!./node_modules/sass-resources-loader/lib/loader.js?!./src/components2/Home/ui/PersonStory/PersonStory.module.scss\n");

/***/ })

})